import os

from medperf.exceptions import CleanExit
from medperf.utils import remove_path, dict_pretty_print, approval_prompt
from medperf.entities.result import Result
from medperf.config_management import config


class ResultSubmission:
    @classmethod
    def run(cls, result_uid, approved=False):
        sub = cls(result_uid, approved=approved)
        sub.get_result()
        updated_result_dict = sub.upload_results()
        sub.to_permanent_path(updated_result_dict)
        sub.write(updated_result_dict)

    def __init__(self, result_uid, approved=False):
        self.result_uid = result_uid
        self.comms = config.comms
        self.ui = config.ui
        self.approved = approved

    def get_result(self):
        self.result = Result.get(self.result_uid)

    def request_approval(self):
        dict_pretty_print(self.result.results)
        self.ui.print("Above are the results generated by the model")

        approved = approval_prompt(
            "Do you approve uploading the presented results to the MedPerf? [Y/n]"
        )

        return approved

    def upload_results(self):
        approved = self.approved or self.request_approval()

        if not approved:
            raise CleanExit("Results upload operation cancelled")

        updated_result_dict = self.result.upload()
        return updated_result_dict

    def to_permanent_path(self, result_dict: dict):
        """Rename the temporary result submission to a permanent one

        Args:
            result_dict (dict): updated results dictionary
        """

        old_result_loc = self.result.path
        updated_result = Result(**result_dict)
        new_result_loc = updated_result.path
        remove_path(new_result_loc)
        os.rename(old_result_loc, new_result_loc)

    def write(self, updated_result_dict):
        result = Result(**updated_result_dict)
        result.write()
