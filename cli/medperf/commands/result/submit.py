from medperf.utils import pretty_error, dict_pretty_print, approval_prompt
from medperf.entities.result import Result
from medperf.entities.dataset import Dataset
from medperf.enums import Status
from medperf import config


class ResultSubmission:
    @classmethod
    def run(cls, benchmark_uid, data_uid, model_uid, approved=False):
        dset = Dataset.from_generated_uid(data_uid)
        sub = cls(benchmark_uid, dset.uid, model_uid, approved=approved)
        updated_result_dict = sub.upload_results()
        sub.write(updated_result_dict)

    def __init__(self, benchmark_uid, data_uid, model_uid, approved=False):
        self.benchmark_uid = benchmark_uid
        self.data_uid = data_uid
        self.model_uid = model_uid
        self.comms = config.comms
        self.ui = config.ui
        self.approved = approved

    def request_approval(self, result):
        if result.status == Status.APPROVED:
            return True

        dict_pretty_print(result.results)
        self.ui.print("Above are the results generated by the model")

        approved = approval_prompt(
            "Do you approve uploading the presented results to the MLCommons comms? [Y/n]"
        )

        return approved

    def upload_results(self):
        result = Result.from_entities_uids(
            self.benchmark_uid, self.model_uid, self.data_uid
        )
        approved = self.approved or self.request_approval(result)

        if not approved:
            msg = "Results upload operation cancelled"
            pretty_error(msg, add_instructions=False)

        updated_result_dict = result.upload()
        return updated_result_dict

    def write(self, updated_result_dict):
        result = Result(updated_result_dict)
        result.write()
