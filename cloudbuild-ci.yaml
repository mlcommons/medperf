steps:
  - id: "build image"
    name: "gcr.io/cloud-builders/docker"
    dir: "server"
    args: 
      [
      "build", 
      "-t", 
      "${_REGION}-${_ARTIFACT_REGISTRY_DOMAIN}/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:${SHORT_SHA}",
      "-f",
      "Dockerfile.cloudbuild", 
      "."
      ]

  - id: "push image"
    name: "gcr.io/cloud-builders/docker"
    args: 
      [
        "push", 
        "${_REGION}-${_ARTIFACT_REGISTRY_DOMAIN}/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:${SHORT_SHA}"
      ]

  - id: "delete sql database if already present"
    name: "gcr.io/cloud-builders/gcloud"
    args:
      [
        "sql",
        "databases",
        "delete",
        "${_GCP_CI_DATABASE_NAME}",
        "--instance",
        "${_SQL_INSTANCE_NAME}",
        "--quiet"
      ]

  - id: "create sql database"
    name: "gcr.io/cloud-builders/gcloud"
    args:
      [
        "sql",
        "databases",
        "create",
        "${_GCP_CI_DATABASE_NAME}",
        "--instance",
        "${_SQL_INSTANCE_NAME}"
      ]

  - id: "apply migrations"
    name: "gcr.io/google-appengine/exec-wrapper"
    dir: "server"
    args:
      [
        "-i",
        "${_REGION}-${_ARTIFACT_REGISTRY_DOMAIN}/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:${SHORT_SHA}",
        "-s",
        "${PROJECT_ID}:${_REGION}:${_SQL_INSTANCE_NAME}",
        "-e",
        "SETTINGS_SECRETS_NAME=${_SECRET_SETTINGS_NAME}",
        "-e",
        "GCP_CI_CLOUDBUILD=${_GCP_CI_CLOUDBUILD}",
        "-e",
        "GCP_CI_DATABASE_URL=${_GCP_CI_DATABASE_URL}",
        "--",
        "python",
        "manage.py",
        "migrate",
      ]

  - id: "collect static"
    name: "gcr.io/google-appengine/exec-wrapper"
    dir: "server"
    args:
      [
        "-i",
        "${_REGION}-${_ARTIFACT_REGISTRY_DOMAIN}/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:${SHORT_SHA}",
        "-s",
        "${PROJECT_ID}:${_REGION}:${_SQL_INSTANCE_NAME}",
        "-e",
        "SETTINGS_SECRETS_NAME=${_SECRET_SETTINGS_NAME}",
        "-e",
        "GCP_CI_CLOUDBUILD=${_GCP_CI_CLOUDBUILD}",
        "-e",
        "GCP_CI_DATABASE_URL=${_GCP_CI_DATABASE_URL}",
        "--",
        "python",
        "manage.py",
        "collectstatic",
        "--verbosity",
        "2",
        "--no-input",
      ]

  - id: "deploy cloud run"
    name: "gcr.io/cloud-builders/gcloud"
    args: 
      [
        "run", 
        "deploy", 
        "${_CLOUD_RUN_SERVICE_NAME}", 
        "--platform", 
        "managed", 
        "--region", 
        "${_REGION}", 
        "--image", 
        "${_REGION}-${_ARTIFACT_REGISTRY_DOMAIN}/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:${SHORT_SHA}", 
        "--add-cloudsql-instances", 
        "${PROJECT_ID}:${_REGION}:${_SQL_INSTANCE_NAME}",
        "--set-env-vars",
        "SETTINGS_SECRETS_NAME=${_SECRET_SETTINGS_NAME}",
        "--set-env-vars",
        "GCP_CI_CLOUDBUILD=${_GCP_CI_CLOUDBUILD}",
        "--set-env-vars",
        "GCP_CI_DATABASE_URL=${_GCP_CI_DATABASE_URL}",
        "--allow-unauthenticated",
        "--min-instances",
        "${_CLOUD_RUN_MIN_INSTANCES}"
      ]
      
  - id: "get cloud run endpoint"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "/bin/sh"
    args:
      [
       "-c", 
       "echo $(gcloud run services describe ${_CLOUD_RUN_SERVICE_NAME} --region ${_REGION} --format 'value(status.url)') > /workspace/service-${_PR_NUMBER}.txt"
      ]

  - id: "get super admin username and password"
    name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "/bin/sh"
    dir: "server"
    args:
      [
       "-c",
       "apt-get update && apt install jq -y && echo $(sh secret.sh -s ${_SECRET_SETTINGS_NAME} -k SUPERUSER_USERNAME)> /workspace/username-${_PR_NUMBER}.txt && echo $(sh secret.sh -s ${_SECRET_SETTINGS_NAME} -k SUPERUSER_PASSWORD) > /workspace/password-${_PR_NUMBER}.txt"
      ]

  - id: "add seed values to the server"
    name: "python"
    entrypoint: "/bin/sh"
    dir: "server"
    args:
      [
       "-c",
       "pip install -r test-requirements.txt --user && python seed.py --server $(cat /workspace/service-${_PR_NUMBER}.txt) --username $(cat /workspace/username-${_PR_NUMBER}.txt) --password $(cat /workspace/password-${_PR_NUMBER}.txt)"
      ]

  - id: "delete cloud run"
    name: "gcr.io/cloud-builders/gcloud"
    args:
      [
        "run",
        "services",
        "delete",
        "${_CLOUD_RUN_SERVICE_NAME}",
        "--region",
        "${_REGION}",
        "--quiet"
      ]

  - id: "delete sql database"
    name: "gcr.io/cloud-builders/gcloud"
    args:
      [
        "sql",
        "databases",
        "delete",
        "${_GCP_CI_DATABASE_NAME}",
        "--instance",
        "${_SQL_INSTANCE_NAME}",
        "--quiet"
      ]      

substitutions:
  _REGION: us-west1
  _ARTIFACT_REGISTRY_DOMAIN: docker.pkg.dev
  _REPO_NAME: medperf-repo
  _IMAGE_NAME: medperf-api
  _CLOUD_RUN_SERVICE_NAME: medperf-api-cb-ci-pr-${_PR_NUMBER}
  _CLOUD_RUN_MIN_INSTANCES: '1'
  _SECRET_SETTINGS_NAME: django-dev-settings
  _SQL_INSTANCE_NAME: medperf-dev
  ##settings specific for CI trigger##
  _GCP_CI_CLOUDBUILD: 'True'
  _GCP_CI_DATABASE_NAME: db-cb-ci-pr-${_PR_NUMBER}
  #_GCP_CI_DATABASE_URL var is set in Cloud build trigger configuration 

options:
    dynamic_substitutions: true
