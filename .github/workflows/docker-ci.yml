name: Integration local docker workflow

on: pull_request

jobs:
  setup:
    name: local-docker-deploy
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: medperf-api:test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set server environment vars
      working-directory: ./server
      run: cp .env.example .env

    - name: Generate SSL certificate
      working-directory: ./server
      run: sh setup-dev-server.sh -c cert.crt -k cert.key -d 0

    - name: Install Docker
      run: |
        sudo apt-get update -y
        sudo apt-get install \
        ca-certificates \
        curl \
        gnupg \
        lsb-release -y
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get install moby-engine moby-cli containerd.io

    - name: Build container image
      working-directory: ./server
      run: docker build -t ${{ env.IMAGE_NAME }} -f Dockerfile.gha .

    - name: Run server in background
      run: PORT=8080 && docker run -d -p 8000:${PORT} -e PORT=${PORT} -e SSL_FLAGS="--certfile=cert.crt --keyfile=cert.key" ${{ env.IMAGE_NAME }}

    - name: Run integration tests
      working-directory: ./server
      run: pip install -r test-requirements.txt --user && python seed.py --cert cert.crt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f cli/requirements.txt ]; then pip install -e cli; fi

    - name: Run client integration tests
      working-directory: .
      run: sh cli/cli.sh -s https://127.0.0.1:8000 -d ~ -u admin -p admin -a server/cert.crt
